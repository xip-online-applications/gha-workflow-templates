name: 'NX to S3 deploy'
description: 'Deploy an NX project to S3.'
author: 'XIP Online Services'

inputs:
    aws-role-arn:
        description: 'The AWS role to assume and perform AWS actions with.'
        required: true
    aws-region:
        description: 'The AWS region to push the image to.'
        required: true
    aws-session-name:
        description: 'The AWS session name to use when assuming the AWS role.'
        default: 'xip-gha-aws-nx-s3-deploy'
    chroot:
        description: 'The chroot to use for the deployment.'
        default: '.'
    package-install-command:
        description: 'The command to run to install the packages.'
        default: 'npm ci'
    nx-app:
        description: 'The nx app to deploy.'
        required: true
        default: 'frontend'
    nx-environment:
        description: 'The nx environment to deploy.'
        required: true
        default: 'development'
    node-version:
        description: 'The node version to setup'
        default: 'lts/*'
    s3-bucket:
        description: 'The S3 bucket to deploy to.'
        required: true
    s3-path:
        description: 'The S3 path to deploy to.'
        default: '/'
    cloudfront-distribution-id:
        description: 'The CloudFront distribution ID to invalidate.'
        required: true

runs:
    using: 'composite'
    steps:
        -   uses: actions/setup-node@v4
            with:
                node-version: '${{ inputs.node-version }}'

        -   name: Configure AWS Credentials
            uses: aws-actions/configure-aws-credentials@v4
            with:
                aws-region: '${{ inputs.aws-region }}'
                role-to-assume: '${{ inputs.aws-role-arn }}'
                role-session-name: '${{ inputs.aws-session-name }}'

        -   name: Cache ${{ inputs.nx-app }} ${{ inputs.nx-environment }} (1/2)
            uses: actions/cache@v4
            id: cache-node-${{ inputs.nx-app }}-${{ inputs.nx-environment }}
            env:
                cache-name: cache-node-${{ inputs.nx-app }}-${{ inputs.nx-environment }}
            with:
                path: ${{ inputs.chroot }}/NX/node_modules
                key: ${{ runner.os }}-node-${{ env.cache-name }}-${{ hashFiles('${{ inputs.chroot }}/project.json') }}
                restore-keys: ${{ runner.os }}-node-${{ env.cache-name }}-
        -   name: Cache ${{ inputs.nx-app }} ${{ inputs.nx-environment }} (2/2)
            shell: bash
            if: steps.cache-node-${{ inputs.nx-app }}-${{ inputs.nx-environment }}.outputs.cache-hit != 'true'
            run: npm list

        -   name: Install packages
            shell: bash
            working-directory: '${{ inputs.chroot }}'
            run: '${{ inputs.package-install-command }}'

        -   name: Build ${{ inputs.nx-app }} ${{ inputs.nx-environment }}
            shell: bash
            working-directory: '${{ inputs.chroot }}'
            run: 'npx nx run ${{ inputs.nx-app }}:build:${{ inputs.nx-environment }}'

        -   name: Deploy ${{ inputs.nx-app }} ${{ inputs.nx-environment }} to S3
            shell: bash
            working-directory: '${{ inputs.chroot }}'
            run: 'aws s3 sync dist/${{ inputs.nx-app }}/${{ inputs.nx-environment }} s3://${{ inputs.s3-bucket }}${{ inputs.s3-path }} --delete'

        -   name: Invalidate CloudFront cache
            shell: bash
            run: 'aws cloudfront create-invalidation --distribution-id ${{ inputs.cloudfront-distribution-id }} --paths "${{ inputs.s3-path }}*"'
