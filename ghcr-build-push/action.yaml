name: 'ghcr.io: build & push'
description: 'Build a container and push it the GitHub container registry (ghcr.io).'
author: 'XIP Online Applications'

branding:
    icon: 'code'
    color: 'blue'

inputs:
    username:
        description: 'The username to use to push the image.'
        default: ${{ github.actor }}
    password:
        description: 'The password to use to push the image, usually a GitHub token.'
        default: ${{ github.token }}
    repository:
        description: 'The repository name to push the image to.'
        default: ${{ github.repository }}
    tag:
        description: 'The tag to apply to the container.'
        default: 'latest'
    context:
        description: 'The context to build the container from.'
        default: '.'
    dockerfile:
        description: 'The Dockerfile to use in the build.'
        default: 'Dockerfile'
    build-args:
        description: 'List of build-time variables.'
        default: ''
    target:
        description: 'The target to use in the build.'
        required: false
    platforms:
        description: 'The comma separated list of platforms to build the container for.'
        default: 'linux/amd64'

outputs:
    registry:
        value: ${{ steps.login.outputs.registry }}/${{ inputs.repository }}
        description: 'The ghcr.io registry the image has been pushed to.'
    image:
        value: ${{ steps.login.outputs.registry }}/${{ inputs.repository }}:${{ inputs.tag }}
        description: 'The full image name with registry and tag.'

runs:
    using: 'composite'
    steps:
        -   name: Set up [qemu-user-static]
            uses: awalsh128/cache-apt-pkgs-action@latest
            with:
                packages: qemu-user-static

        -   id: login
            name: Login to ghcr.io
            uses: xip-online-applications/gha-workflow-templates/ghcr-login@main
            with:
                username: ${{ inputs.username }}
                password: ${{ inputs.password }}

        -   name: Build and push
            shell: bash
            run: |
                platforms=(${{ inputs.platforms }})
                platform_args=""
                for platform in "${platforms[@]}"; do
                    platform_args+="--platform $platform "
                done

                build_args=(${{ inputs.build-args }})
                build_args_str=""
                for arg in "${build_args[@]}"; do
                    build_args_str+="--build-arg $arg "
                done

                buildah build \
                    $platform_args \
                    --tag ${{ steps.login-ecr.outputs.registry }}/${{ inputs.repository }}:${{ inputs.tag }} \
                    --cache-from ${{ steps.login-ecr.outputs.registry }}/${{ inputs.repository }} \
                    --layers \
                    --cache-to ${{ steps.login-ecr.outputs.registry }}/${{ inputs.repository }} \
                    $build_args_str \
                    --target ${{ inputs.target }} \
                    --file ${{ inputs.dockerfile }} \
                    ${{ inputs.context }}
                buildah push ${{ steps.login-ecr.outputs.registry }}/${{ inputs.repository }}:${{ inputs.tag }}
